#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.1.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 31 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 1721 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; Exercise 1.1"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";10                                   => 10"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";(+ 5 3 4)                            => 12"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";(- 9 1)                              => 8"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";(/ 6 2)                              => 3"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";(+ (* 2 4) (- 4 6))                  => 6"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";(define a 3)                         => a"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";(define b (+ a 1))                   => b"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";(+ a b (* a b))                      => 19"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";(= a b)                              => False"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";(if (and (> b a) (< b (* a b))) b a) => 4"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";(cond ((= a 4) 6)"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";((= b 4) (+ 6 7 a))"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";(else 25))                           => 16"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";(+ 2 (if (> b a) b a))               => 6"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";(* (cond ((> a b) a)"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";((< a b) b)"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";(else -1))"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";(+ a 1))                             => 16"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; Results"
0 0 24 29 1 #"\n"
0 0 21 3 2 #"10"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 14 3 1 #"b"
0 0 24 29 1 #"\n"
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 21 3 1 #"6"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"(("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"25"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"(("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; Exercise 1.2"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 7 #"))))) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; Exercise 1.3"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"sum-two-largest"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 2 #"sq"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #")  ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 2 #"sq"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 2 #"sq"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 2 #"sq"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 2 #"sq"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 2 #"sq"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 2 #"sq"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; Exercise 1.4"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";;(define (a-plus-abs-b a b)"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;  ((if (> b 0) + -) a b))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";; The if combination determines the operation on a and b"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";; if b is a negative number, ie less than zero, then the operation"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; is the difference between a and -b"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; else, the + operator is used"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; Exercise 1.5"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 1 #"p"
0 0 17 3 3 #") ("
0 0 17 3 3 #"p))"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";(define (test x"
0 0 17 3 1 #" "
0 0 17 3 2 #"y)"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";   ("
0 0 17 3 2 #"if"
0 0 17 3 2 #" ("
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 2 #") "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 3 #"y))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 4 #"test"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 2 #" ("
0 0 17 3 3 #"p))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; Applicative-Order: Eval [the arguments] and [then] Apply. "
0 0 24 29 1 #"\n"
0 0 17 3 5 #";; To"
0 0 17 3 1 #" "
0 0 17 3 5 #"apply"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 8 #"compound"
0 0 17 3 13 #" procedure to"
0 0 17 3 1 #" "
0 0 17 3 9 #"arguments"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; evaluate "
0 0 17 3 4 #"the "
0 0 17 3 38 #"body of the procedure with each formal"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; parameter replaced by the corresponding argument."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; Applicative-Order Applied"
0 0 24 29 1 #"\n"
0 0 17 3 14 #"; (test 0 (p))"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; (test 0 ((p)))          ; Replace"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; (test 0 (((p))))        ; Replace"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; (test 0 ((((p)))))      ; Replace"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; ...                     ; Replace Forever"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; Normal-Order: Fully expand and then reduce"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; Normal-Order Applied"
0 0 24 29 1 #"\n"
0 0 17 3 14 #"; (test 0 (p))"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; (if (= 0 0) 0 (p))"
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; (if true 0 (p))        "
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; 0"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; Short Cicuits because the predicate is evaluated first, "
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; which "
0 0 17 3 10 #"evaluates "
0 0 17 3 3 #"to "
0 0 17 3 5 #"true,"
0 0 17 3 1 #" "
0 0 17 3 10 #"therefore "
0 0 17 3 4 #"the "
0 0 17 3 11 #"consequent,"
0 0 17 3 1 #" "
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; 0"
0 0 17 3 1 #" "
0 0 17 3 2 #"in"
0 0 17 3 1 #" "
0 0 17 3 4 #"this"
0 0 17 3 1 #" "
0 0 17 3 4 #"case"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 9 #" returned"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; Exercise 1.6"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; Original Newton's Method"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 9 #"sqrt-iter"
0 0 17 3 1 #" "
0 0 17 3 5 #"guess"
0 0 17 3 1 #" "
0 0 17 3 2 #"x)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 3 #"  ("
0 0 17 3 2 #"if"
0 0 17 3 2 #" ("
0 0 17 3 12 #"good-enough?"
0 0 17 3 1 #" "
0 0 17 3 5 #"guess"
0 0 17 3 1 #" "
0 0 17 3 2 #"x)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 6 #"      "
0 0 17 3 6 #"guess "
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 7 #"      ("
0 0 17 3 9 #"sqrt-iter"
0 0 17 3 2 #" ("
0 0 17 3 7 #"improve"
0 0 17 3 1 #" "
0 0 17 3 5 #"guess"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 2 #") "
0 0 17 3 4 #"x)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; New If"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 9 #"sqrt-iter"
0 0 17 3 1 #" "
0 0 17 3 5 #"guess"
0 0 17 3 1 #" "
0 0 17 3 2 #"x)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 3 #"  ("
0 0 17 3 6 #"new-if"
0 0 17 3 2 #" ("
0 0 17 3 12 #"good-enough?"
0 0 17 3 1 #" "
0 0 17 3 5 #"guess"
0 0 17 3 1 #" "
0 0 17 3 2 #"x)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 15 #"          guess"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 11 #"          ("
0 0 17 3 9 #"sqrt-iter"
0 0 17 3 2 #" ("
0 0 17 3 7 #"improve"
0 0 17 3 1 #" "
0 0 17 3 5 #"guess"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 2 #") "
0 0 17 3 4 #"x)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #"; In the new-if procedure, Applicative-Order substitution will need "
 #"to"
) 0 0 24 29 1 #"\n"
0 0 17 3 58
#"; evaluate the call to sqrt-iter since it is an argument, "
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; regardless"
0 0 17 3 1 #" "
0 0 17 3 2 #"if"
0 0 17 3 1 #" "
0 0 17 3 2 #"it"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 12 #"truly needed"
0 0 17 3 1 #" "
0 0 17 3 2 #"or"
0 0 17 3 1 #" "
0 0 17 3 4 #"not."
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #"; As a result, there will be a non-terminated procedure call to sqrt"
 #"-iter"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; Exercise 1.7 (Failed)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"sqrt-iter"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 12 #"good-enough?"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"guess"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"sqrt-iter"
0 0 24 3 2 #" ("
0 0 14 3 7 #"improve"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"improve"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"average"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"average"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"good-enough?"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 3 #"abs"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 21 3 5 #"0.001"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"sqrt-iter"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 6 #"0.0002"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"sqrt"
0 0 24 3 1 #" "
0 0 21 3 6 #"0.0002"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";; 0.001 is not small enough to represent the differences beyond tha"
 #"t number."
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";; For example, if x = 0.0001, the 0.001 does not account for differ"
 #"ences "
) 0 0 24 29 1 #"\n"
0 0 17 3 60
#";; less than 0.001, and therefore yeilds an incorrect result"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";(sqrt-iter"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 8 #"9876000)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 5 #"sqrt "
0 0 17 3 8 #"9876000)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";; Takes way too long to run and while the answer is closer to being"
 #" correct, "
) 0 0 24 29 1 #"\n"
0 0 17 3 59
#";; the good-enough? procedure does not have the ability to "
0 0 17 3 8 #"identify"
0 0 17 3 1 #" "
0 0 17 3 5 #"large"
0 0 17 3 13 #" differences."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"good-enough-alt?"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 10 #"prev_guess"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 3 #"abs"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 10 #"prev_guess"
0 0 24 3 2 #") "
0 0 14 3 5 #"guess"
0 0 24 3 3 #")) "
0 0 21 3 5 #"0.001"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"sqrt-iter-alt"
0 0 24 3 1 #" "
0 0 14 3 10 #"prev_guess"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 16 #"good-enough-alt?"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 10 #"prev_guess"
0 0 24 3 2 #") "
0 0 14 3 5 #"guess"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"sqrt-iter-alt"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 2 #" ("
0 0 14 3 7 #"improve"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 13 #"sqrt-iter-alt"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.0"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.0"
0 0 24 3 1 #" "
0 0 21 3 16 #"9898989898989898"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"sqrt"
0 0 24 3 1 #" "
0 0 21 3 16 #"9898989898989898"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; Exercise 1.8"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"improve-cube"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 3 #")) "
0 0 21 3 1 #"3"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"cube-root"
0 0 24 3 1 #" "
0 0 14 3 10 #"prev_guess"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 16 #"good-enough-alt?"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 10 #"prev_guess"
0 0 24 3 2 #") "
0 0 14 3 5 #"guess"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"cube-root"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 2 #" ("
0 0 14 3 12 #"improve-cube"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"cube-root"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.0"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.0"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; Exercise 1.9"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 1 #"+"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 2 #"b)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 2 #"if"
0 0 17 3 2 #" ("
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 2 #") "
0 0 17 3 1 #"b"
0 0 17 3 2 #" ("
0 0 17 3 3 #"inc"
0 0 17 3 2 #" ("
0 0 17 3 1 #"+"
0 0 17 3 2 #" ("
0 0 17 3 3 #"dec"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 2 #") "
0 0 17 3 5 #"b))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #"; Substitution"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; (+ 4 5)"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; (inc (+ 3 5))"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; (inc (inc (+ 2 5)))"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; (inc (inc (inc (+ 1 5))))"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; (inc (inc (inc (inc (+ 0 5)))))"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; (inc (inc (inc (inc 5))))"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; (inc (inc (inc 6)))"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; (inc (inc 7))"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; (inc 8)"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; 9"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; This procedure is a Recursive Process, Recursive Procedure"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 1 #"+"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 2 #"b)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 2 #"if"
0 0 17 3 2 #" ("
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 2 #") "
0 0 17 3 1 #"b"
0 0 17 3 2 #" ("
0 0 17 3 1 #"+"
0 0 17 3 2 #" ("
0 0 17 3 3 #"dec"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 3 #") ("
0 0 17 3 3 #"inc"
0 0 17 3 1 #" "
0 0 17 3 5 #"b))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #"; Substitution"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; (+ 4 5)"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; (+ 3 6)"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; (+ 2 7)"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; (+ 1 8)"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; (+ 0 9)"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; 9"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; This procedure is a Iterative Process, Recursive Procedure"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; Exercise 1.10"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; Ackermann's Function"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 1 #"A"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 1 #" "
0 0 17 3 2 #"y)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 3 #"  ("
0 0 17 3 4 #"cond"
0 0 17 3 3 #" (("
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 1 #"y"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 2 #") "
0 0 17 3 2 #"0)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 10 #"        (("
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 3 #") ("
0 0 17 3 1 #"*"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 3 #"y))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 10 #"        (("
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 1 #"y"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 2 #") "
0 0 17 3 2 #"2)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 9 #"        ("
0 0 17 3 4 #"else"
0 0 17 3 2 #" ("
0 0 17 3 1 #"A"
0 0 17 3 2 #" ("
0 0 17 3 1 #"-"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 3 #") ("
0 0 17 3 1 #"A"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 2 #" ("
0 0 17 3 1 #"-"
0 0 17 3 1 #" "
0 0 17 3 1 #"y"
0 0 17 3 1 #" "
0 0 17 3 7 #"1))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #"; Substitution"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; (A 1 10)"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; (A 0 (A 1 9))"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; (A 0 (A 0 (A 1 8)))"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; (A 0 (A 0 (A 0 (A 1 7))))"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; (A 0 (A 0 (A 0 (A 0 (A 1 6)))))"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 5))))))"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 4)))))))"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 3))))))))"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 2)))))))))"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 1))))))))))"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 2)))))))))"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 4))))))))"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 8)))))))"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 16))))))"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; (A 0 (A 0 (A 0 (A 0 (A 0 32)))))"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; (A 0 (A 0 (A 0 (A 0 64))))"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; (A 0 (A 0 (A 0 128)))"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; (A 0 (A 0 256))"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; (A 0 512)"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; 1024"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; (A 2 4)"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; (A 1 (A 2 3))"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; (A 1 (A 1 (A 2 2)))"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; (A 1 (A 1 (A 1 (A 2 1))))"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; (A 1 (A 1 (A 1 2)))"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; (A 1 (A 1 (A 0 (A 1 1))))"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; (A 1 (A 1 (A 0 2)))"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; (A 1 (A 1 4))"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; (A 1 (A 0 (A 1 3)))"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; (A 1 (A 0 (A 0 (A 1 2))))"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; (A 1 (A 0 (A 0 (A 0 (A 1 1)))))"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; (A 1 (A 0 (A 0 (A 0 2))))"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; (A 1 (A 0 (A 0 4)))"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; (A 1 (A 0 8))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; (A 1 16)"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; (A 0 (A 1 15))"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; (A 0 (A 0 (A 1 14)))"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; (A 0 (A 0 (A 0 (A 1 13))))"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; (A 0 (A 0 (A 0 (A 0 (A 1 12)))))"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 11))))))"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; (A 0 (A 0 (A 0(A 0 (A 0 (A 0 (A 1 10)))))))"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 9))))))))"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 8)))))))))"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 7))))))))))"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 6))))))))))"
 #")"
) 0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 5)))))"
 #")))))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 4"
 #")))))))))))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 ("
 #"A 1 3))))))))))))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 93
(
 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 ("
 #"A 0 (A 1 2)))))))))))))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 99
(
 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 ("
 #"A 0 (A 0 (A 1 1))))))))))))))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 93
(
 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 ("
 #"A 0 (A 0 2)))))))))))))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 ("
 #"A 0 4))))))))))))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 8"
 #")))))))))))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 16))))"
 #"))))))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 32)))))))))"
 #"))"
) 0 0 24 29 1 #"\n"
0 0 17 3 64
#"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 64))))))))))"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 128)))))))))"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 256))))))))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 512)))))))"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 1024))))))"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; (A 0 (A 0 (A 0 (A 0 (A 0 2048)))))"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; (A 0 (A 0 (A 0 (A 0 4096))))"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; (A 0 (A 0 (A 0 8192)))"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; (A 0 (A 0 16384))"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; (A 0 32768)"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; 65536"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; (A 3 3)"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; (A 2 (A 3 2))"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; (A 2 (A 2 (A 3 1)))"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; (A 2 (A 2 2))"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; (A 2 (A 1 (A 2 1)))"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; (A 2 (A 1 2))"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; (A 2 (A 0 (A 1 1))))"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; (A 2 (A 0 2))))"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; (A 2 4)"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; (A 1 (A 2 3))"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; (A 1 (A 1 (A 2 2)))"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; (A 1 (A 1 (A 1 (A 2 1))))"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; (A 1 (A 1 (A 1 2)))"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; (A 1 (A 1 (A 0 (A 1 1))))"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; (A 1 (A 1 (A 0 2)))"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; (A 1 (A 1 4))"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; (A 1 (A 0 (A 1 3)))"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; (A 1 (A 0 (A 0 (A 1 2))))"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; (A 1 (A 0 (A 0 (A 0 (A 1 1)))))"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; (A 1 (A 0 (A 0 (A 0 2))))"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; (A 1 (A 0 (A 0 4)))"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; (A 1 (A 0 8))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; (A 1 16)"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; (A 0 (A 1 15))"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; (A 0 (A 0 (A 1 14)))"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; (A 0 (A 0 (A 0 (A 1 13))))"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; (A 0 (A 0 (A 0 (A 0 (A 1 12)))))"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 11))))))"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 10)))))))"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 9))))))))"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 8)))))))))"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 7))))))))))"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 6))))))))))"
 #")"
) 0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 5)))))"
 #")))))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 4"
 #")))))))))))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 ("
 #"A 1 3))))))))))))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 93
(
 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 ("
 #"A 0 (A 1 2)))))))))))))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 99
(
 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 ("
 #"A 0 (A 0 (A 1 1))))))))))))))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 93
(
 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 ("
 #"A 0 (A 0 2)))))))))))))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 ("
 #"A 0 4))))))))))))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 8"
 #")))))))))))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 16))))"
 #"))))))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 32)))))))))"
 #"))"
) 0 0 24 29 1 #"\n"
0 0 17 3 64
#"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 64))))))))))"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 128)))))))))"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 256))))))))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 512)))))))"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 1024))))))"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; (A 0 (A 0 (A 0 (A 0 (A 0 2048)))))"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; (A 0 (A 0 (A 0 (A 0 4096))))"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; (A 0 (A 0 (A 0 8192)))"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; (A 0 (A 0 16384))"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; (A 0 32768)"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; 65536"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; Mathematical Definitions"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; (define (f n) (A 0 n)) => 2n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; (define (g n) (A 1 n)) => 2^n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; (define (h n) (A 2 n)) => 2   ^2  ^2    ^2    ^2"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";                           [1] [2] [3]...[n-1] [n]"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; (define (k n) (* 5 n n)) => 5n^2"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; Tree Recursion Chapter Problem"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 12 #"count-change"
0 0 17 3 1 #" "
0 0 17 3 6 #"amount"
0 0 17 3 3 #") ("
0 0 17 3 2 #"cc"
0 0 17 3 1 #" "
0 0 17 3 6 #"amount"
0 0 17 3 1 #" "
0 0 17 3 3 #"5))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 2 #"cc"
0 0 17 3 1 #" "
0 0 17 3 6 #"amount"
0 0 17 3 1 #" "
0 0 17 3 15 #"kinds-of-coins)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 3 #"  ("
0 0 17 3 4 #"cond"
0 0 17 3 3 #" (("
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 6 #"amount"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 2 #") "
0 0 17 3 2 #"1)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 10 #"        (("
0 0 17 3 2 #"or"
0 0 17 3 2 #" ("
0 0 17 3 1 #"<"
0 0 17 3 1 #" "
0 0 17 3 6 #"amount"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 3 #") ("
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 14 #"kinds-of-coins"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 3 #")) "
0 0 17 3 2 #"0)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 9 #"        ("
0 0 17 3 4 #"else"
0 0 17 3 2 #" ("
0 0 17 3 1 #"+"
0 0 17 3 2 #" ("
0 0 17 3 2 #"cc"
0 0 17 3 1 #" "
0 0 17 3 6 #"amount"
0 0 17 3 2 #" ("
0 0 17 3 1 #"-"
0 0 17 3 1 #" "
0 0 17 3 14 #"kinds-of-coins"
0 0 17 3 1 #" "
0 0 17 3 3 #"1))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 18 #"                 ("
0 0 17 3 2 #"cc"
0 0 17 3 2 #" ("
0 0 17 3 1 #"-"
0 0 17 3 7 #" amount"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 25 #"                        ("
0 0 17 3 18 #"first-denomination"
0 0 17 3 1 #" "
0 0 17 3 16 #"kinds-of-coins))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 21 #"                     "
0 0 17 3 19 #"kinds-of-coins)))))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 18 #"first-denomination"
0 0 17 3 1 #" "
0 0 17 3 15 #"kinds-of-coins)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 3 #"  ("
0 0 17 3 4 #"cond"
0 0 17 3 3 #" (("
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 14 #"kinds-of-coins"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 2 #") "
0 0 17 3 2 #"1)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 10 #"        (("
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 14 #"kinds-of-coins"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 2 #") "
0 0 17 3 2 #"5)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 10 #"        (("
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 14 #"kinds-of-coins"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 2 #") "
0 0 17 3 3 #"10)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 10 #"        (("
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 14 #"kinds-of-coins"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 2 #") "
0 0 17 3 3 #"25)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 10 #"        (("
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 14 #"kinds-of-coins"
0 0 17 3 1 #" "
0 0 17 3 1 #"5"
0 0 17 3 2 #") "
0 0 17 3 5 #"50)))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 12 #"count-change"
0 0 17 3 1 #" "
0 0 17 3 3 #"10)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; Exercise 1.11"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"ex11"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"ex11"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"ex11"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 5 #"))) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"ex11"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"ex11a"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"ex11-iter"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"ex11-iter"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"ex11-iter"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"ex11"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"ex11a"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
